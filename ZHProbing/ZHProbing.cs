//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\CAPP\application\ZHProbing.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: MSI
//              Version: NX 2011
//              Date: 06-03-2022  (Format: mm-dd-yyyy)
//              Time: 15:45 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.Collections.Generic;
using NXOpen.CAM;
using System.Linq;
using Operation = NXOpen.CAM.Operation;
using NXOpen.Features;
using System.Security.Cryptography;
using System.IO;
using Microsoft.Win32;
using System.Reflection;
using System.Windows.Forms;
using NXOpen.VectorArithmetic;
//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public partial class ZHProbing
{
    Dictionary<string, NXOpen.CAM.Tool> _NCOffsetToolDic = new Dictionary<string, NXOpen.CAM.Tool>();
    Dictionary<string, NXOpen.CAM.Tool> _NCToolDic = new Dictionary<string, NXOpen.CAM.Tool>();
    Dictionary<string, CAMObject> _GeomtryDic = new Dictionary<string, CAMObject>();
    Dictionary<string, CAMObject> _NCGroupDic = new Dictionary<string, CAMObject>();
    Dictionary<string, NXOpen.CAM.Method> _MethodDic = new Dictionary<string, NXOpen.CAM.Method>();
    List<string> _OperaNameList = new List<string>();
    List<SelectPoint> pointStrList = new List<SelectPoint>();
    public List<Tag> _geomtryList = new List<Tag>();

    public Dictionary<string, NXOpen.CAM.Tool> DicTool => _NCToolDic;
    public Dictionary<string, CAMObject> DicGeom => _GeomtryDic;
    public Dictionary<string, CAMObject> DicNCGroup => _NCGroupDic;
    public Dictionary<string, NXOpen.CAM.Method> DicMethod => _MethodDic;
    public List<SelectPoint> SelectPointList => pointStrList;
    public List<Tag> GeomtryList => _geomtryList;
    public NXOpen.CAM.OrientGeometry MutltiAXISCsys { get; set; } = null;
    public bool IsMultiAsix => theZHProbing.ToggleMultiAXIS.Value;

    string MCSRoot = "";

    //class member
    public static Session theSession = null;
    public static UI theUI = null;
    public string theDlxFileName;
    public NXOpen.BlockStyler.BlockDialog theDialog;
    public NXOpen.BlockStyler.TabControl tabControl;// Block type: Tabs Page
    public NXOpen.BlockStyler.Group tabPage3;// Block type: Group
    public NXOpen.BlockStyler.StringBlock ProgramGroup;// Block type: String
    public NXOpen.BlockStyler.StringBlock Geomtry;// Block type: String
    public NXOpen.BlockStyler.StringBlock Method;// Block type: String
    public NXOpen.BlockStyler.StringBlock NCTool;// Block type: String
    public NXOpen.BlockStyler.DoubleBlock ProbingHeadLenght;// Block type: Double
    public NXOpen.BlockStyler.StringBlock ProgramName;// Block type: String
    public NXOpen.BlockStyler.Group tabPage2;// Block type: Group
    public NXOpen.BlockStyler.Group group8;// Block type: Group
    public NXOpen.BlockStyler.Toggle ToggleMultiAXIS;// Block type: Toggle
    public NXOpen.BlockStyler.SpecifyCSYS coord_system0;// Block type: Specify Csys
    public NXOpen.BlockStyler.StringBlock ProbingSelectType;// Block type: String
    public NXOpen.BlockStyler.StringBlock ProbingDirection;// Block type: String
    public NXOpen.BlockStyler.Group group11;// Block type: Group
    public NXOpen.BlockStyler.StringBlock ProbingType;// Block type: String
    public NXOpen.BlockStyler.DoubleBlock InCircleDepth;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock RadialClearance;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock SafeClearance;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock InnerCircleDiameter;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock AngleSet;// Block type: Double
    public NXOpen.BlockStyler.StringBlock TextInfo;// Block type: String
    public NXOpen.BlockStyler.SpecifyPlane SafeHeight;// Block type: Specify Plane
    public NXOpen.BlockStyler.SpecifyPlane SafeClearancePlane;// Block type: Specify Plane
    public NXOpen.BlockStyler.Group group7;// Block type: Group
    public NXOpen.BlockStyler.IntegerBlock ProbingPointCount;// Block type: Integer
    public NXOpen.BlockStyler.SpecifyPoint AnglePoint1;// Block type: Specify Point
    public NXOpen.BlockStyler.DoubleBlock Angle1;// Block type: Double
    public NXOpen.BlockStyler.SpecifyPoint AnglePoint2;// Block type: Specify Point
    public NXOpen.BlockStyler.DoubleBlock Angle2;// Block type: Double
    public NXOpen.BlockStyler.SpecifyPoint AnglePoint3;// Block type: Specify Point
    public NXOpen.BlockStyler.DoubleBlock Angle3;// Block type: Double
    public NXOpen.BlockStyler.Group group16;// Block type: Group
    public NXOpen.BlockStyler.Toggle ToggleFaceAndPoint;// Block type: Toggle
    public NXOpen.BlockStyler.SpecifyPoint InnerCirclePoint;// Block type: Specify Point
    public NXOpen.BlockStyler.FaceCollector face_select1;// Block type: Face Collector
    public NXOpen.BlockStyler.SpecifyPlane plane0;// Block type: Specify Plane
    public NXOpen.BlockStyler.SpecifyPoint ConeFace;// Block type: Specify Point
    public NXOpen.BlockStyler.SpecifyVector Vector1;// Block type: Specify Vector
    public NXOpen.BlockStyler.ListBox pointList;// Block type: List Box
    public NXOpen.BlockStyler.AngularDimension AngularX;// Block type: Angular Dim
    public NXOpen.BlockStyler.AngularDimension AngularY;// Block type: Angular Dim
    public NXOpen.BlockStyler.Group group;// Block type: Group
    public NXOpen.BlockStyler.Toggle IsProbingResult;// Block type: Toggle
    public NXOpen.BlockStyler.Group group6;// Block type: Group
    public NXOpen.BlockStyler.Toggle IsChangeCsys;// Block type: Toggle
    public NXOpen.BlockStyler.StringBlock ChangeCsysType;// Block type: String
    public NXOpen.BlockStyler.Group group18;// Block type: Group
    public NXOpen.BlockStyler.IntegerBlock AddToolNumber;// Block type: Integer
    public NXOpen.BlockStyler.StringBlock OffsetToolName;// Block type: String
    public NXOpen.BlockStyler.Group group9;// Block type: Group
    public NXOpen.BlockStyler.Toggle ToggleMultilinesString;// Block type: Toggle
    public NXOpen.BlockStyler.MultilineString multiline_string0;// Block type: Multiline String
    public NXOpen.BlockStyler.Group tabPage1;// Block type: Group
    public NXOpen.BlockStyler.Group group20;// Block type: Group
    public NXOpen.BlockStyler.IntegerBlock CutSpeed;// Block type: Integer
    public NXOpen.BlockStyler.Group group21;// Block type: Group
    public NXOpen.BlockStyler.StringBlock FastMoveType;// Block type: String
    public NXOpen.BlockStyler.IntegerBlock G01FastCutSpeed;// Block type: Integer
    public NXOpen.BlockStyler.Group group22;// Block type: Group
    public NXOpen.BlockStyler.Toggle ColliderAndHandle;// Block type: Toggle
    public NXOpen.BlockStyler.Group group19;// Block type: Group
    public NXOpen.BlockStyler.DoubleBlock ToolHandleNumber;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock HandleNumber;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock ToolRadius;// Block type: Double
    public NXOpen.BlockStyler.Group tabPage;// Block type: Group
    public NXOpen.BlockStyler.Group group5;// Block type: Group
    public NXOpen.BlockStyler.DoubleBlock BlankStock;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock WallStock;// Block type: Double
    public NXOpen.BlockStyler.Separator separator0;// Block type: Separator
    public NXOpen.BlockStyler.Group group4;// Block type: Group
    public NXOpen.BlockStyler.DoubleBlock UpperTolerance;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock LowerTolerance;// Block type: Double
    public NXOpen.BlockStyler.Group group3;// Block type: Group
    public NXOpen.BlockStyler.DoubleBlock ProbingResultRang;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock DimensRangCheck;// Block type: Double
    public NXOpen.BlockStyler.Group group2;// Block type: Group
    public NXOpen.BlockStyler.Group group1;// Block type: Group
    public NXOpen.BlockStyler.DoubleBlock OffsetZ;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock OffsetX;// Block type: Double
    public NXOpen.BlockStyler.DoubleBlock OffsetY;// Block type: Double
    public NXOpen.BlockStyler.DrawingArea drawingArea0;// Block type: Drawing Area
    public NXOpen.BlockStyler.Button CreateOpretion;// Block type: Button


    public ZHProbing()
    {

        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "ZHProbing.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }


    
    bool IsKey()
    {
        try
        {

            RegistryKey key = Registry.LocalMachine;

            RegistryKey software = key.OpenSubKey("software\\Probe");

            RegistryKey software2 = key.OpenSubKey("software\\GPUID");


            if (software == null || software2 == null)
            {
                return false;
            }
            else
            {
                string cpukey = (string)software.GetValue("Probe");

                string cpuid = (string)software2.GetValue("GPUID");

                if (DesDecrypt(cpukey) == cpuid)
                {
                    return true;
                }
            }
        }
        catch (Exception ex)
        {
            return false;
        }

        return false;
    }


    /// <returns></returns>
    public static string DesDecrypt(string decryptString)
    {
        string key = "qqwweerr";
        byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(key.Substring(0, 8));
        byte[] keyIV = keyBytes;
        byte[] inputByteArray = Convert.FromBase64String(decryptString);
        DESCryptoServiceProvider provider = new DESCryptoServiceProvider();
        MemoryStream mStream = new MemoryStream();
        CryptoStream cStream = new CryptoStream(mStream, provider.CreateDecryptor(keyBytes, keyIV), CryptoStreamMode.Write);
        cStream.Write(inputByteArray, 0, inputByteArray.Length);
        cStream.FlushFinalBlock();
        return System.Text.Encoding.UTF8.GetString(mStream.ToArray());
    }


    public void initialize_cb()
    {
        try
        {
            tabControl = (NXOpen.BlockStyler.TabControl)theDialog.TopBlock.FindBlock("tabControl");
            tabPage3 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("tabPage3");
            ProgramGroup = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ProgramGroup");
            Geomtry = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("Geomtry");
            Method = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("Method");
            NCTool = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("NCTool");
            ProbingHeadLenght = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("ProbingHeadLenght");
            ProgramName = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ProgramName");
            tabPage2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("tabPage2");
            group8 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group8");
            ToggleMultiAXIS = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("ToggleMultiAXIS");
            coord_system0 = (NXOpen.BlockStyler.SpecifyCSYS)theDialog.TopBlock.FindBlock("coord_system0");
            ProbingSelectType = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ProbingSelectType");
            ProbingDirection = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ProbingDirection");
            group11 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group11");
            ProbingType = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ProbingType");
            InCircleDepth = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("InCircleDepth");
            RadialClearance = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("RadialClearance");
            SafeClearance = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("SafeClearance");
            InnerCircleDiameter = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("InnerCircleDiameter");
            AngleSet = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("AngleSet");
            TextInfo = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("TextInfo");
            SafeHeight = (NXOpen.BlockStyler.SpecifyPlane)theDialog.TopBlock.FindBlock("SafeHeight");
            SafeClearancePlane = (NXOpen.BlockStyler.SpecifyPlane)theDialog.TopBlock.FindBlock("SafeClearancePlane");
            group7 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group7");
            ProbingPointCount = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("ProbingPointCount");
            AnglePoint1 = (NXOpen.BlockStyler.SpecifyPoint)theDialog.TopBlock.FindBlock("AnglePoint1");
            Angle1 = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("Angle1");
            AnglePoint2 = (NXOpen.BlockStyler.SpecifyPoint)theDialog.TopBlock.FindBlock("AnglePoint2");
            Angle2 = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("Angle2");
            AnglePoint3 = (NXOpen.BlockStyler.SpecifyPoint)theDialog.TopBlock.FindBlock("AnglePoint3");
            Angle3 = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("Angle3");
            group16 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group16");
            ToggleFaceAndPoint = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("ToggleFaceAndPoint");
            InnerCirclePoint = (NXOpen.BlockStyler.SpecifyPoint)theDialog.TopBlock.FindBlock("InnerCirclePoint");
            face_select1 = (NXOpen.BlockStyler.FaceCollector)theDialog.TopBlock.FindBlock("face_select1");
            plane0 = (NXOpen.BlockStyler.SpecifyPlane)theDialog.TopBlock.FindBlock("plane0");
            ConeFace = (NXOpen.BlockStyler.SpecifyPoint)theDialog.TopBlock.FindBlock("ConeFace");
            Vector1 = (NXOpen.BlockStyler.SpecifyVector)theDialog.TopBlock.FindBlock("Vector1");
            pointList = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("pointList");
            AngularX = (NXOpen.BlockStyler.AngularDimension)theDialog.TopBlock.FindBlock("AngularX");
            AngularY = (NXOpen.BlockStyler.AngularDimension)theDialog.TopBlock.FindBlock("AngularY");
            group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
            IsProbingResult = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("IsProbingResult");
            group6 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group6");
            IsChangeCsys = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("IsChangeCsys");
            ChangeCsysType = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ChangeCsysType");
            group18 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group18");
            AddToolNumber = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("AddToolNumber");
            OffsetToolName = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("OffsetToolName");
            group9 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group9");
            ToggleMultilinesString = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("ToggleMultilinesString");
            multiline_string0 = (NXOpen.BlockStyler.MultilineString)theDialog.TopBlock.FindBlock("multiline_string0");
            tabPage1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("tabPage1");
            group20 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group20");
            CutSpeed = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("CutSpeed");
            group21 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group21");
            FastMoveType = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("FastMoveType");
            G01FastCutSpeed = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("G01FastCutSpeed");
            group22 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group22");
            ColliderAndHandle = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("ColliderAndHandle");
            group19 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group19");
            ToolHandleNumber = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("ToolHandleNumber");
            HandleNumber = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("HandleNumber");
            ToolRadius = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("ToolRadius");
            tabPage = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("tabPage");
            group5 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group5");
            BlankStock = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("BlankStock");
            WallStock = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("WallStock");
            separator0 = (NXOpen.BlockStyler.Separator)theDialog.TopBlock.FindBlock("separator0");
            group4 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group4");
            UpperTolerance = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("UpperTolerance");
            LowerTolerance = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("LowerTolerance");
            group3 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group3");
            ProbingResultRang = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("ProbingResultRang");
            DimensRangCheck = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("DimensRangCheck");
            group2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group2");
            group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
            OffsetZ = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("OffsetZ");
            OffsetX = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("OffsetX");
            OffsetY = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("OffsetY");
            drawingArea0 = (NXOpen.BlockStyler.DrawingArea)theDialog.TopBlock.FindBlock("drawingArea0");
            CreateOpretion = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("CreateOpretion");
            //------------------------------------------------------------------------------

            multiline_string0.Height = 4;
 
            this.SafeHeight.LabelString = "安全高度";
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

   public static ZHProbing theZHProbing = null;
    public static void Main()
    {
         
        try
        {
            if (IsCAMMode())
            {
                theZHProbing = new ZHProbing();
                // The following method shows the dialog immediately
                theZHProbing.Show();
            }
            else
            {
                System.Windows.Forms.MessageBox.Show("图档未打开","打开图片进图CAM模块");
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if (theZHProbing != null)
                theZHProbing.Dispose();
            theZHProbing = null;
        }
    }
  
    public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
        return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }

    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    static bool IsCAMMode()
    {
        int id_drf = NXOpen.UF.UFConstants.UF_APP_CAM;
        int model = 0;
        NXOpen.UF.UFSession.GetUFSession().UF.AskApplicationModule(out model);

        if (id_drf == model)
        {
            return true;
        }

        return false;
    }


    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {

            if (!IsCAMMode())
            {
                MessageBox("请切换至CAM模块");

                return NXOpen.UIStyler.DialogResponse.Cancel;
            }


            if (IsKey() == false)
            {
                MessageBox("无授权");


                return NXOpen.UIStyler.DialogResponse.Cancel;
            }

            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if (theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }

    Dictionary<string, string[]> m_Config = new Dictionary<string, string[]>();
    void InitConfig()
    {
        string configPath = AssemblyDirectory + "/配置.txt";
        string[] lines = File.ReadAllLines(configPath);
        foreach(string line in lines)
        {
            string[] str1 = line.Split('=');
            if (str1.Length == 2)
            {
                string[] values = str1[1].Split('@');

                m_Config.Add(str1[0], values);
            }
        }
    }


    public void dialogShown_cb()
    {
        try
        {

            _NCGroupDic.Clear();

            _NCToolDic.Clear();

            _GeomtryDic.Clear();

            _MethodDic.Clear();

            InitNCGroups();

            if (_NCGroupDic.Count == 0)
            {
                MessageBox("程序组空", NXMessageBox.DialogType.Error);
                return ;
            }

            InitNCTools();

            if (_NCToolDic.Count == 0)
            {
                MessageBox("刀具空", NXMessageBox.DialogType.Error);
                return ;
            }

            InitMillGeoms();

            if (_GeomtryDic.Count == 0)
            {
                MessageBox("坐标几何体空", NXMessageBox.DialogType.Error);
                return ;
            }

            InitMethods();

            if (_MethodDic.Count == 0)
            {
                //MessageBox("坐标几何体空", NXMessageBox.DialogType.Error);
                //return;
            }

            InitConfig();

            ToggleFaceAndPoint.Show = false;

            this.face_select1.Show = true;

            IsChangeCsys.Value = false;
            this.ChangeCsysType.Show = IsChangeCsys.Value;

            this.ToggleMultiAXIS.Value = false;
            this.ToggleMultilinesString.Value = false;

            this.multiline_string0.Show = this.ToggleMultilinesString.Value;
            this.coord_system0.Show = this.ToggleMultiAXIS.Value;

            this.InCircleDepth.Value = 0;
            this.CutSpeed.Value = 50;
            this.LowerTolerance.Value = 0.01;
            this.UpperTolerance.Value = 0.01;
            this.ProbingResultRang.Value = 1.01;
            this.TextInfo.Value = "";

            this.UpperTolerance.Value = 0.2;
            this.LowerTolerance.Value = -0.2;
            this.DimensRangCheck.Value = 1.01;
            this.BlankStock.Value = 0;
            this.WallStock.Value = 0;
            this.ProbingHeadLenght.Value = 270;
            this.IsProbingResult.Value = false;

            this.ChangeCsysType.SetListItems(new string[4] { "G54", "G55", "G56", "G57" });
            this.ChangeCsysType.Value = "G54";

            this.ProbingType.SetListItems(m_Config.Keys.ToArray());
            this.ProbingType.Value = m_Config.Keys.ToArray()[0];

            this.ProbingSelectType.SetListItems(m_Config[this.ProbingType.Value]);
            this.ProbingSelectType.Value = m_Config[this.ProbingType.Value][0];
            Probing.momProbeTybpe = "MEASURE";
            ProbingPointCount.Value = 4;
            this.Angle1.Show = false;
            this.Angle2.Show = false;
            this.Angle3.Show = false;

            this.AnglePoint1.Show = false;
            this.AnglePoint2.Show = false;
            this.AnglePoint3.Show = false;

            FastMoveType.SetListItems(new string[] {"G0-快速模式","G1-进给模式" });
            FastMoveType.Value = "G0-快速模式";

            G01FastCutSpeed.Show = false;

            ProbingDirection.SetListItems(new string[] {"-Z","+X","-X","+Y","-Y"});
            ProbingDirection.Value = "-Z";

            //if (this.ProbingType.Value == "外圆")
            //{
            //    this.SafeClearance.Show = true;
            //}
            //else
            //{
            //    this.SafeClearance.Show = false;
            //}

         

            { //上一次数值

                (bool,string) data1 =  ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, _NCGroupName);
                if(data1.Item1)
                {
                    if(_NCGroupDic.ContainsKey(data1.Item2))
                        this.ProgramGroup.Value = data1.Item2;
                    
                }

                (bool, string) data2 = ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, _NCToolName);
                if (data2.Item1)
                {
                    if (_NCToolDic.ContainsKey(data2.Item2))
                        this.NCTool.Value = data2.Item2;
                }


                (bool, string) data3 =  ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, _MillGeomName);
                if (data3.Item1)
                {
                    if (_GeomtryDic.ContainsKey(data3.Item2))
                    {
                        this.Geomtry.Value = data3.Item2;
                        MCSRoot = this.Geomtry.Value;

                        Extend.LastGeomtryName = MCSRoot;
                    }
                }

                (bool, string) data4 =  ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, _MethodName);
                if (data4.Item1)
                {
                    if (_MethodDic.ContainsKey(data4.Item2))
                        this.Method.Value = data4.Item2;
                }

                (bool, string) data5 = ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, _ProgramName);
                if (data5.Item1)
                {
                    this.ProgramName.Value = data5.Item2;
                }

                (bool, double) dataBlankStock = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "BlankStock");
                if (dataBlankStock.Item1)
                {
                    BlankStock.Value = dataBlankStock.Item2;
                }

                (bool, double) dataWallStock = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "WallStock");
                if (dataWallStock.Item1)
                {
                    WallStock.Value = dataBlankStock.Item2;
                }

                (bool, double) UpperTolerance1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "UpperTolerance");
                if (UpperTolerance1.Item1)
                {
                    UpperTolerance.Value = UpperTolerance1.Item2;
                }

                (bool, double) LowerTolerance1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "LowerTolerance");
                if (LowerTolerance1.Item1)
                {
                    LowerTolerance.Value = LowerTolerance1.Item2;
                }

                (bool, double) ProbingResultRang1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "ProbingResultRang");
                if (ProbingResultRang1.Item1)
                {
                    ProbingResultRang.Value = ProbingResultRang1.Item2;
                }

                (bool, double) DimensRangCheck1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "DimensRangCheck");
                if (DimensRangCheck1.Item1)
                {
                    DimensRangCheck.Value = DimensRangCheck1.Item2;
                }

                (bool, double) OffsetX1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "OffsetX");
                if (OffsetX1.Item1)
                {
                    OffsetX.Value = OffsetX1.Item2;
                }


                (bool, double) OffsetY1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "OffsetY");
                if (OffsetY1.Item1)
                {
                    OffsetY.Value = OffsetY1.Item2;
                }

                (bool, double) OffsetZ1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "OffsetZ");
                if (OffsetZ1.Item1)
                {
                    OffsetZ.Value = OffsetZ1.Item2;
                }

                (bool, double) IsProbingResult1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "IsProbingResult");
                if (IsProbingResult1.Item1)
                {
                    IsProbingResult.Value = IsProbingResult1.Item2 == 1 ? true : false;
                }

                (bool, int) AddToolNumber1 = ProbeAttribute.GetUIAttributeInt(theSession.Parts.Work, "AddToolNumber");
                if (AddToolNumber1.Item1)
                {
                    AddToolNumber.Value = AddToolNumber1.Item2;
                }

                (bool, double) ProbingHeadLenght1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "ProbingHeadLenght");
                if (ProbingHeadLenght1.Item1)
                {
                    ProbingHeadLenght.Value = ProbingHeadLenght1.Item2;
                }

                //测量类型
                (bool, string) ProbingSelectType1 = ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, "ProbingSelectType");
                if (ProbingSelectType1.Item1)
                {
                    ProbingSelectType.Value = ProbingSelectType1.Item2;
                }

                //类型选择
                (bool, string) ProbingType1 = ProbeAttribute.GetUIAttributeString(theSession.Parts.Work, "ProbingType");
                if (ProbingType1.Item1)
                {
                    ProbingType.Value = ProbingType1.Item2;
                }

                //测量深度
                (bool, double) InCircleDepth1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "InCircleDepth");
                if (InCircleDepth1.Item1)
                {
                    InCircleDepth.Value = InCircleDepth1.Item2;
                }

             
                (bool, double) RadialClearance1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "RadialClearance");
                if (RadialClearance1.Item1)
                {
                    RadialClearance.Value = RadialClearance1.Item2;
                }

              
                (bool, double) SafeClearance1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "SafeClearance");
                if (SafeClearance1.Item1)
                {
                    SafeClearance.Value = SafeClearance1.Item2;
                }

                (bool, double) AngleSet1 = ProbeAttribute.GetUIAttributeDouble(theSession.Parts.Work, "AngleSet");
                if (AngleSet1.Item1)
                {
                    AngleSet.Value = AngleSet1.Item2;
                }
            }

            InitNCOffsetTools();

            SelectProbingType();

            GroupChange();

            InitMcsSelectShow();

            pointList.SetDeleteHandler((val)=> {
                try
                {

                    var item = pointStrList[pointList.SelectedItemIndex];

                    if (item == null)
                        return 1;

                    TaggedObject target = NXOpen.Utilities.NXObjectManager.Get(item.Tag);

                    theSession.UpdateManager.AddToDeleteList(new NXObject[1] { (NXObject)target });

                    theSession.UpdateManager.DoUpdate(new Session.UndoMarkId());

                    pointStrList.RemoveAt(pointList.SelectedItemIndex);

                    List<string> strList = new List<string>();

                    if (this.ProbingType.Value == "平面")
                    {
                        int index = 0;
                        pointStrList.ForEach((val1) =>
                        {

                            strList.Add(val1.PointName(++index));
                        });

                        if (pointStrList.Count == 2)
                        {
                            string disx1 = System.Math.Abs(pointStrList[0].MCSPoint.X - pointStrList[1].MCSPoint.X).ToString("F3");
                            string disy1 = System.Math.Abs(pointStrList[0].MCSPoint.Y - pointStrList[1].MCSPoint.Y).ToString("F3");
                            strList.Add($"P1->P2 : X = {disx1}, Y = {disy1}");

                        }
                        else if (pointStrList.Count == 3)
                        {
                            string disx1 = System.Math.Abs(pointStrList[0].MCSPoint.X - pointStrList[1].MCSPoint.X).ToString("F3");
                            string disy1 = System.Math.Abs(pointStrList[0].MCSPoint.Y - pointStrList[1].MCSPoint.Y).ToString("F3");

                            string disx2 = System.Math.Abs(pointStrList[0].MCSPoint.X - pointStrList[2].MCSPoint.X).ToString("F3");
                            string disy2 = System.Math.Abs(pointStrList[0].MCSPoint.Y - pointStrList[2].MCSPoint.Y).ToString("F3");

                            strList.Add($"P1->P2 : X = {disx1}, Y = {disy1}");
                            strList.Add($"P1->p3 : X = {disx2}, Y = {disy2}");

                        }


                        this.pointList.SetListItems(strList.ToArray());
                    }

                    else if (ProbingType.Value == "两孔角向")
                    {
                        List<string> pointList = new List<string>();

                        if (pointStrList.Count == 2)
                        {
                            if (pointStrList.Count == 2)
                            {
                                var point1 = pointStrList[0].MCSPoint;
                                var point2 = pointStrList[0].MCSPoint;


                                double disX = System.Math.Abs(point1.X - point2.X);
                                double disY = System.Math.Abs(point1.Y - point2.Y);

                                pointList.Add($"孔距 : X={disX.ToString("F3")}," + $" Y={disY.ToString("F3")}");
                            }

                        }
                        else
                        {
                            int index = 0;
                            pointStrList.ForEach((p) =>
                            {
                                pointList.Add(p.PointName(++index));
                            });

                        }


                        this.pointList.SetListItems(pointList.ToArray());
                    }

                    else if (ProbingType.Value == "两点角向")
                    {
                        List<string> pointList = new List<string>();

                        if (pointStrList.Count == 2)
                        {
                            if (pointStrList.Count == 2)
                            {
                                var point1 = pointStrList[0].MCSPoint;
                                var point2 = pointStrList[1].MCSPoint;

                                double disX = System.Math.Abs(point1.X - point2.X);
                                double disY = System.Math.Abs(point1.Y - point2.Y);

                                pointList.Add($"点距 : X={disX.ToString("F3")}," + $" Y={disY.ToString("F3")}");
                            }
                        }
                        else
                        {
                            int index = 0;
                            pointStrList.ForEach((p) =>
                            {
                                pointList.Add(p.PointName(++index));
                            });
                        }

                        this.pointList.SetListItems(pointList.ToArray());
                    }

                    else if (ProbingType.Value == "台阶面")
                    {
                        List<string> pointList = new List<string>();

                        int index = 0;
                        pointStrList.ForEach((p) =>
                        {
                            pointList.Add(p.PointName(++index));
                        });

                        this.pointList.SetListItems(pointList.ToArray());
                    }

                    else if (ProbingType.Value == "内圆" || ProbingType.Value == "外圆")
                    {
                       
                        List<string> pointList = new List<string>();

                        int index = 0;
                        pointStrList.ForEach((p) =>
                        {
                            pointList.Add(p.PointName(++index));
                        });

                        this.pointList.SetListItems(pointList.ToArray());
                    }

                    else if(ProbingType.Value == "单向")
                    {
                        this.pointList.SetListItems(new string[] { });
                        this.pointStrList.Clear();
                    }
                }
                catch(System.Exception ex)
                {
                    MessageBox("选择点删除");
                }

                return 1;
            });

        

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    NXOpen.Features.Sphere CreateProbePreviewSphere(Point3d p)
    {
        var workPart = theSession.Parts.Work;

        NXOpen.Features.Sphere nullNXOpen_Features_Sphere = null;
        NXOpen.Features.SphereBuilder sphereBuilder1;
        sphereBuilder1 = workPart.Features.CreateSphereBuilder(nullNXOpen_Features_Sphere);
        sphereBuilder1.CenterPoint = workPart.Points.CreatePoint(p);


        sphereBuilder1.Diameter.RightHandSide = "1.5";
        sphereBuilder1.BooleanOption.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Create;
        nullNXOpen_Features_Sphere = (NXOpen.Features.Sphere)sphereBuilder1.Commit();

        {//点颜色设置

            NXOpen.DisplayModification displayModification1;
            displayModification1 = theSession.DisplayManager.NewDisplayModification();

            displayModification1.ApplyToAllFaces = true;

            displayModification1.ApplyToOwningParts = false;

            displayModification1.NewColor = 120;

            displayModification1.NewWidth = NXOpen.DisplayableObject.ObjectWidth.One;


            NXOpen.DisplayableObject[] objects1 = new NXOpen.DisplayableObject[1];
            NXOpen.Body body1 = (NXOpen.Body)workPart.Bodies.FindObject(nullNXOpen_Features_Sphere.JournalIdentifier);
            objects1[0] = body1;

            displayModification1.Apply(objects1);

            displayModification1.Dispose();

        }

        sphereBuilder1.Destroy();

        return nullNXOpen_Features_Sphere;
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {

            if (SafeHeight.GetSelectedObjects().Length <= 0)
            {
                MessageBox("安全高度未指定", NXMessageBox.DialogType.Error);

                return 1;
            }

            if (this.CutSpeed.Value <= 0)
            {
                MessageBox("切削速度未指定", NXMessageBox.DialogType.Error);

                return 1;
            }

            if (this.ProgramName.Value.Length == 0)
            {
                MessageBox("程序名不能为空", NXMessageBox.DialogType.Error);

                return 1;
            }


            if (CheckOperationName())
            {
                // MessageBox("程序名已经存在", NXMessageBox.DialogType.Error);

                // return 1;
            }

            if (this.ProbingType.Value == "内圆")
            {
                if (InnerCircleDiameter.Value <= 0)
                {
                    MessageBox("输入内圆直径", NXMessageBox.DialogType.Error);

                    return 1;
                }

                Probing.CreateProbing内圆(this);
            }
            else if (this.ProbingType.Value == "外圆")
            {
                if (InnerCircleDiameter.Value <= 0)
                {
                    MessageBox("输入外圆直径", NXMessageBox.DialogType.Error);

                    return 1;
                }

                Probing.CreateProbing外圆(this);
            }
    
            else if (this.ProbingType.Value == "台阶面")
            {
                Probing.CreateProbing台阶(this);
            }
            else if (this.ProbingType.Value == "平面")
            {
                Probing.CreateProbing平面(this);
            }
            else if (this.ProbingType.Value == "单向")
            {
                Probing.CreateProbing单向(this);
            }
            else if (this.ProbingType.Value == "凸台")
            {
                Probing.CreateProbiung凸台(this);
            }
            else if (this.ProbingType.Value == "凹槽")
            {
                Probing.CreateProbiung凹槽(this);
            }
            else if (this.ProbingType.Value == "两孔角向")
            {
                Probing.CreateProbiung2孔角向(this);
            }
            else if (this.ProbingType.Value == "两点角向")
            {
                Probing.CreateProbiung2点角向(this);
            }


            if (pointStrList.Count > 0)
            {
                NXObject[] deletObjects = new NXObject[pointStrList.Count];
                for (int i = 0; i < pointStrList.Count; i++)
                {
                    deletObjects[i] = (NXObject)NXOpen.Utilities.NXObjectManager.Get(pointStrList[i].Tag);
                }

                theSession.UpdateManager.AddToDeleteList(deletObjects);

                theSession.UpdateManager.DoUpdate(new Session.UndoMarkId());
               // pointStrList.Clear();
            }


            if(this.IsChangeCsys.Value)
            {
                NXOpen.CAM.NCGroup orientGeometry1 = (NXOpen.CAM.NCGroup)DicGeom[this.Geomtry.Value];

                NXOpen.CAM.MillOrientGeomBuilder millOrientGeomBuilder1;
                millOrientGeomBuilder1 = theSession.Parts.Work.CAMSetup.CAMGroupCollection.CreateMillOrientGeomBuilder(orientGeometry1);


                if (this.ChangeCsysType.Value == "G54")
                {
                    millOrientGeomBuilder1.FixtureOffsetBuilder.Value = 1;
                }
                else if(this.ChangeCsysType.Value == "G55")
                {
                    millOrientGeomBuilder1.FixtureOffsetBuilder.Value = 2;
                }
                else if (this.ChangeCsysType.Value == "G56")
                {
                    millOrientGeomBuilder1.FixtureOffsetBuilder.Value = 3;
                }
                else if (this.ChangeCsysType.Value == "G57")
                {
                    millOrientGeomBuilder1.FixtureOffsetBuilder.Value = 4;
                }
            
                millOrientGeomBuilder1.Commit();

                millOrientGeomBuilder1.Destroy();
            }
            else
            {
                NXOpen.CAM.NCGroup orientGeometry1 = (NXOpen.CAM.NCGroup)DicGeom[this.Geomtry.Value];

                NXOpen.CAM.MillOrientGeomBuilder millOrientGeomBuilder1;
                millOrientGeomBuilder1 = theSession.Parts.Work.CAMSetup.CAMGroupCollection.CreateMillOrientGeomBuilder(orientGeometry1);

                millOrientGeomBuilder1.FixtureOffsetBuilder.Value = 1;

                millOrientGeomBuilder1.Commit();

                millOrientGeomBuilder1.Destroy();
            
            }


            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, _NCGroupName, this.ProgramGroup.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, _NCToolName, this.NCTool.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, _MillGeomName, Extend.LastGeomtryName);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, _MethodName, this.Method.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, _ProgramName, this.ProgramName.Value);

            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "BlankStock", this.BlankStock.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "WallStock", this.WallStock.Value);

            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "UpperTolerance", this.UpperTolerance.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "LowerTolerance", this.LowerTolerance.Value);

            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "ProbingResultRang", this.ProbingResultRang.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "DimensRangCheck", this.DimensRangCheck.Value);

            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "OffsetX", this.OffsetX.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "OffsetY", this.OffsetY.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "OffsetZ", this.OffsetZ.Value);

            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "IsProbingResult", this.IsProbingResult.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "AddToolNumber", this.AddToolNumber.Value);
            ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "ProbingHeadLenght", this.ProbingHeadLenght.Value);

            {
                ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "ProbingSelectType", ProbingSelectType.Value);

                ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "ProbingType", ProbingType.Value);

                ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "InCircleDepth", InCircleDepth.Value);

                ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "RadialClearance", RadialClearance.Value);

                ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "SafeClearance", SafeClearance.Value);

                ProbeAttribute.SetUIAttribute(theSession.Parts.Work, "AngleSet", AngleSet.Value);
            }

       
            foreach (var bl in Probing.BalloonList)
            {
                //theSession.UpdateManager.AddToDeleteList(bl);
                NXOpen.UF.UFSession.GetUFSession().Obj.DeleteObject(bl.Tag);
            }
           // theSession.UpdateManager.DoUpdate(new Session.UndoMarkId());

         

            //DisplayableObject[] objects1 = new DisplayableObject[1];
            //Body body1 = (Body)workPart.Bodies.FindObject("UNPARAMETERIZED_FEATURE(152)");
            //objects1[0] = body1;
            //theSession.DisplayManager.BlankObjects(objects1);

            //workPart.ModelingViews.WorkView.FitAfterShowOrHide(NXOpen.View.ShowOrHideType.HideOnly);

            MessageBox("创建成功");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    double angle(double x1,double y1,double x2, double y2)
    {
        double x = x2 - x1;
        double y = y2 - y1;

        double dis = Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2));

        double cos = x / dis;
        double rad = Math.Acos(cos);

        double deg = 180 / (Math.PI / rad);

        if (y < 0)
        {
            deg = 360 - deg;
        }
        else if (y == 0 && x < 0)
        {
            deg = 180;
        }

        return deg;
    }

    int SelectPointIndex = 0;
    public int update_cb(NXOpen.BlockStyler.UIBlock block)
    {

       
        try
        {
            if (block == ProgramGroup)
            {
                //---------Enter your code here-----------
            }
            else if (block == AnglePoint1)
            {
                //---------Enter your code here-----------

                var v31 = InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                v31.y = 0;
                var v32 = AnglePoint1.Point.ToMCSPoint().ToVector3();
                v32.y = 0;

                Vector3 dir = (v32 - v31).normalized;

                double ang = Vector3.Angle(Vector3.right, dir);

                this.Angle1.Value = ang;
            }
            else if (block == AnglePoint2)
            {
                //---------Enter your code here-----------
                var v31 = InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                v31.y = 0;
                var v32 = AnglePoint1.Point.ToMCSPoint().ToVector3();
                v32.y = 0;

                Vector3 dir = (v32 - v31).normalized;

                var v321 = InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                v321.y = 0;
                var v322 = AnglePoint2.Point.ToMCSPoint().ToVector3();
                v322.y = 0;

                Vector3 dir2 = (v322 - v321).normalized;


                double ang = Vector3.Angle(dir2, dir);

                this.Angle2.Value = ang;
            }
            else if (block == AnglePoint3)
            {
                //---------Enter your code here-----------
                var v31 = InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                v31.y = 0;
                var v32 = AnglePoint2.Point.ToMCSPoint().ToVector3();
                v32.y = 0;

                Vector3 dir = (v32 - v31).normalized;

                var v321 = InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                v321.y = 0;
                var v322 = AnglePoint3.Point.ToMCSPoint().ToVector3();
                v322.y = 0;

                Vector3 dir2 = (v322 - v321).normalized;


                double ang = Vector3.Angle(dir2, dir);

                this.Angle3.Value = ang;
            }
            else if (block == CreateOpretion)
            {
                //---------Enter your code here-----------

                apply_cb();
            }
            else if (block == ToggleFaceAndPoint)
            {
                //---------Enter your code here-----------

                this.face_select1.Show = !ToggleFaceAndPoint.Value;
                this.ConeFace.Show = ToggleFaceAndPoint.Value;

                this.Vector1.Show = ToggleFaceAndPoint.Value;
            }
            else if (block == ConeFace)
            {
                //---------Enter your code here-----------

                if (ProbingType.Value == "外圆")
                {

                    if (this.InnerCirclePoint.GetSelectedObjects().Length == 0)
                    {
                        MessageBox("请先选择中心点");
                    }
                    else
                    {
                        Plane plane = (Plane)this.SafeClearancePlane.GetSelectedObjects()[0];

                        double dep = plane.Origin.Z - ConeFace.Point.Z;

                        pointStrList.ForEach((p) =>
                        {
                            p.MCSPoint.Z = Math.Abs(dep);
                        });

                        List<string> pointList = new List<string>();

                        int index = 0;
                        pointStrList.ForEach((p) =>
                        {
                            pointList.Add(p.PointName(++index));
                        });


                        this.pointList.SetListItems(pointList.ToArray());


                        Vector3 v1 = this.InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                        v1.y = 0;

                        Vector3 v2 = this.ConeFace.Point.ToMCSPoint().ToVector3();
                        v2.y = 0;

                        double distance = (v1 - v2).magnitude;

                        this.InnerCircleDiameter.Value = distance;

                    
                    }
                }

                else if (ProbingType.Value == "内圆")
                {


                    double dep = this.ConeFace.Point.Z;

                    pointStrList.ForEach((p) =>
                    {
                        p.MCSPoint.Z = Math.Abs(dep);
                    });

                    List<string> pointList = new List<string>();

                    int index = 0;
                    pointStrList.ForEach((p) =>
                    {
                        pointList.Add(p.PointName(++index));
                    });


                    this.pointList.SetListItems(pointList.ToArray());


                    Vector3 v1 = this.InnerCirclePoint.Point.ToMCSPoint().ToVector3();
                    v1.y = 0;

                    Vector3 v2 = this.ConeFace.Point.ToMCSPoint().ToVector3();
                    v2.y = 0;

                    double distance = (v1 - v2).magnitude;

                    this.InnerCircleDiameter.Value = distance;
                }

            }
            else if(block == this.plane0)
            {
                if(face_select1.GetSelectedObjects().Length == 2 && plane0.GetSelectedObjects().Length == 1)
                {
   

                    Line[] lines = Probing.GetLines(this);

                    Point3d firstPoint = new Point3d(lines[0].StartPoint.X, lines[0].StartPoint.Y, System.Math.Max(lines[0].StartPoint.Z, lines[0].EndPoint.Z));

                    Point3d secondPoint = new Point3d(lines[1].StartPoint.X, lines[1].StartPoint.Y, System.Math.Max(lines[0].StartPoint.Z, lines[0].EndPoint.Z));


                    //检测点1
                    Vector3 point1 = firstPoint.ToMCSPoint().ToVector3();

                    //检测点2
                    Vector3 point2 = secondPoint.ToMCSPoint().ToVector3();

                    Vector3 dir = (point1 - point2).normalized;

                    Point3d p3d_ = dir.ToNXPoint3d();

                    p3d_.X = System.Math.Abs(p3d_.X);
                    p3d_.Y = System.Math.Abs(p3d_.Y);

                    if (p3d_.X >= 0.90)
                    {
                        this.TextInfo.Value = "XAXIS";
                    }
                    else if(p3d_.Y >= 0.9)
                    {
                        this.TextInfo.Value = "YAXIS";
                    }
                }  
            }
            else if (block == NCTool)
            {
                var workPart = theSession.Parts.Work;

                NXOpen.CAM.Tool tool1 = (NXOpen.CAM.Tool)DicTool[NCTool.Value];

                SetToolRadius(tool1);
                //---------Enter your code here-----------
            }
            else if (block == Geomtry)
            {
                //---------Enter your code here-----------

                InitMcsSelectShow();
            }
            else if (block == Method)
            {
                //---------Enter your code here-----------
            }
            else if (block == coord_system0)
            {

                if(MutltiAXISCsys != null)
                {
                    if (this._GeomtryDic.ContainsKey(MutltiAXISCsys.Name))
                        this._GeomtryDic.Remove(MutltiAXISCsys.Name);

                    theSession.UpdateManager.AddToDeleteList(new NXObject[1] { MutltiAXISCsys });

                    theSession.UpdateManager.DoUpdate(new Session.UndoMarkId());

                    MutltiAXISCsys = null;

                    this.Geomtry.Value = MCSRoot;

                    Extend.LastGeomtryName = MCSRoot;
                }

                if(this.coord_system0.GetSelectedObjects().Length > 0)
                {
                    MutltiAXISCsys = CreateCsys((CartesianCoordinateSystem)this.coord_system0.GetSelectedObjects()[0]);

                    this.Geomtry.Value = MutltiAXISCsys.Name;

                    this._GeomtryDic.Add(MutltiAXISCsys.Name, MutltiAXISCsys);

                    Extend.LastGeomtryName = this.Geomtry.Value;
                }
               
            }
            else if (block == ProbingSelectType)
            {
                //---------Enter your code here-----------

                if(ProbingSelectType.Value == "找正")
                {
                    Probing.momProbeTybpe = "MCS";
                }
                else if(ProbingSelectType.Value == "测量")
                {
                    Probing.momProbeTybpe = "MEASURE";
                }
                else if (ProbingSelectType.Value == "补偿")
                {
                    Probing.momProbeTybpe = "TOOL";
                }

                GroupChange();
            }
            else if (block == ProbingType)
            {
                this.ProbingSelectType.Value = ProbingType.Value;
                SelectProbingType();
                this.ProbingSelectType.SetListItems(m_Config[this.ProbingType.Value]);
            }
            else if (block == InCircleDepth)
            {

                if (ProbingType.Value == "内圆" || ProbingType.Value == "外圆")
                {

                    pointStrList.ForEach((p) =>
                    {
                        p.MCSPoint.Z = InCircleDepth.Value;
                    });

                    List<string> pointList = new List<string>();

                    int index = 0;
                    pointStrList.ForEach((p) =>
                    {
                        pointList.Add(p.PointName(++index));
                    });

                    this.pointList.SetListItems(pointList.ToArray());
                }
                else if (ProbingType.Value == "两点角向")
                {
                    List<string> pointListStr = new List<string>();
                    int index = 0;
                 
                    if (pointStrList.Count == 2)
                    {
                        pointStrList.ForEach((p) =>
                        {
                            var p1 = p.WordPoint.ToMCSPoint();

                            p.MCSPoint = new Point3d(p1.X, p1.Y, p1.Z - InCircleDepth.Value);

                            pointListStr.Add(p.PointName(++index));
                        });

                        var point1 = pointStrList[0].MCSPoint;
                        var point2 = pointStrList[1].MCSPoint;

                        double disX = System.Math.Abs(point1.X - point2.X);
                        double disY = System.Math.Abs(point1.Y - point2.Y);

                        pointListStr.Add($"点距 : X={disX.ToString("F3")}," + $" Y={disY.ToString("F3")}");

                        Point3d dir = (point1.ToVector3() - point2.ToVector3()).normalized.ToNXPoint3d().ToABSPoint3d();

                        if (dir.X > dir.Y)
                        {
                            this.TextInfo.Value = $"XAXIS";
                        }
                        else
                        {
                            this.TextInfo.Value = $"YAXIS";
                        }
                    }
                    
                    if(pointStrList.Count == 1)
                    {
                        index = 0;
                        pointStrList.ForEach((p) =>
                        {
                            var p1 = p.WordPoint.ToMCSPoint();

                            p.MCSPoint = new Point3d(p1.X, p1.Y, p1.Z - InCircleDepth.Value);

                            pointListStr.Add(p.PointName(++index));
                        });
                    }

                    this.pointList.SetListItems(pointListStr.ToArray());
                }
                else if (ProbingType.Value == "两孔角向")
                {
                   
                    List<string> pointList = new List<string>();

         
                    int index = 0;
                    pointStrList.ForEach((p) =>
                    {
                        p.MCSPoint.Z = InCircleDepth.Value;
                        pointList.Add(p.PointName(++index));
                    });


                    if (pointStrList.Count == 2)
                    {
                        var point1 = pointStrList[0].MCSPoint;
                        var point2 = pointStrList[1].MCSPoint;

                        double disX = System.Math.Abs(point1.X - point2.X);
                        double disY = System.Math.Abs(point1.Y - point2.Y);

                        pointList.Add($"孔距 : X={disX.ToString("F3")}," + $" Y={disY.ToString("F3")}");

                        Point3d dir = (point1.ToVector3() - point2.ToVector3()).normalized.ToNXPoint3d().ToABSPoint3d();

                        if (dir.X > dir.Y)
                        {
                            this.TextInfo.Value = $"XAXIS";
                        }
                        else
                        {
                            this.TextInfo.Value = $"YAXIS";
                        }
                    }

                    this.pointList.SetListItems(pointList.ToArray());
                }
            }
            else if (block == ProbingPointCount)
            {
                //---------Enter your code here-----------

                if(ProbingPointCount.Value >= 4)
                {
                    ProbingPointCount.Value = 4;

                    //MessageBox("目前系统最多4个点", NXMessageBox.DialogType.Warning);

                    this.Angle1.Show = false;
                    this.Angle2.Show = false;
                    this.Angle3.Show = false;

                    this.AnglePoint1.Show = false;
                    this.AnglePoint2.Show = false;
                    this.AnglePoint3.Show = false;
                }

                if (ProbingPointCount.Value <= 3)
                {
                    ProbingPointCount.Value = 3;

                    this.Angle1.Show = true;
                    this.Angle2.Show = true;
                    this.Angle3.Show = true;

                    this.AnglePoint1.Show = true;
                    this.AnglePoint2.Show = true;
                    this.AnglePoint3.Show = true;

                    // MessageBox("点必须大于0", NXMessageBox.DialogType.Warning);
                }
            }
            else if (block == SafeClearance)
            {
                //---------Enter your code here-----------
            }
            else if (block == InnerCircleDiameter)
            {
                //---------Enter your code here-----------
            }
            else if (block == SafeHeight)
            {
                //---------Enter your code here-----------
            }
            else if (block == InnerCirclePoint) 
            {

                this.ToggleMultiAXIS.Value = false;
                this.coord_system0.Show = false;


                if (this.ProbingType.Value == "单向")
                {
                    pointStrList.Clear();

                    SelectPoint p = new SelectPoint(InnerCirclePoint.Point.ToMCSPoint(), InnerCirclePoint.Point);

                    this.pointList.SetListItems(new string[] { p.PointName(1) });

                    pointStrList.Add(p);
                }

                else if(this.ProbingType.Value == "平面")
                {

                    if (pointStrList.Count == 3)
                        return 1;

                    SelectPoint p = new SelectPoint(InnerCirclePoint.Point.ToMCSPoint(), InnerCirclePoint.Point);

                    pointStrList.Add(p);

                    List<string> strList = new List<string>();

                    int index = 0;
                    pointStrList.ForEach((val) =>
                    {

                        strList.Add(val.PointName(++index));
                    });

             
                    if (pointStrList.Count == 3)
                    {
                        string disx1 = System.Math.Abs(pointStrList[0].MCSPoint.X - pointStrList[1].MCSPoint.X).ToString("F3");
                        string disy1 = System.Math.Abs(pointStrList[0].MCSPoint.Y - pointStrList[1].MCSPoint.Y).ToString("F3");

                        string disx2 = System.Math.Abs(pointStrList[0].MCSPoint.X - pointStrList[2].MCSPoint.X).ToString("F3");
                        string disy2 = System.Math.Abs(pointStrList[0].MCSPoint.Y - pointStrList[2].MCSPoint.Y).ToString("F3");

                        strList.Add($"P1->P2 : X = {disx1}, Y = {disy1}");
                        strList.Add($"P1->p3 : X = {disx2}, Y = {disy2}");
                      
                    }

                    this.pointList.SetListItems(strList.ToArray());

                    var workPart = theSession.Parts.Work;

                    NXOpen.Features.Sphere sphere = CreateProbePreviewSphere(InnerCirclePoint.Point);

                    p.Tag = sphere.Tag;

                    p.Name = sphere.JournalIdentifier;
                }

                else if (this.ProbingType.Value == "凸台")
                {
                    this.InCircleDepth.Value = InnerCirclePoint.Point.Z;
                }

                else if (ProbingType.Value == "两孔角向")
                {
                    if (pointStrList.Count >= 2)
                        return 1;

                    if (SelectPointIndex > 2)
                        SelectPointIndex = 0;

                    SelectPointIndex++;
                    Probing.CreateBollon(InnerCirclePoint.Point, SelectPointIndex.ToString());


                    List<string> pointList = new List<string>();

                    SelectPoint p1 = new SelectPoint(InnerCirclePoint.Point.ToMCSPoint(), InnerCirclePoint.Point);

                    p1.MCSPoint.Z = this.InCircleDepth.Value;

                    pointStrList.Add(p1);

                    int index = 0;
                    pointStrList.ForEach((p) => {

                        pointList.Add(p.PointName(++index));

       
                    });


                    if(pointStrList.Count == 2)
                    {
                        var point1 = pointStrList[0].MCSPoint;
                        var point2 = pointStrList[1].MCSPoint;

                        double disX = System.Math.Abs(point1.X - point2.X);
                        double disY = System.Math.Abs(point1.Y - point2.Y);

                        pointList.Add($"孔距 : X={disX.ToString("F3")}," + $" Y={disY.ToString("F3")}");

                        Point3d dir = (point1.ToVector3() - point2.ToVector3()).normalized.ToNXPoint3d().ToABSPoint3d();

                        if(dir.X > dir.Y)
                        {
                            this.TextInfo.Value = $"XAXIS";
                        }
                        else
                        {
                            this.TextInfo.Value = $"YAXIS";
                        }
                    }

                    this.pointList.SetListItems(pointList.ToArray());
                }

                else if (ProbingType.Value == "两点角向")
                {
                    if (pointStrList.Count >= 2)
                        return 1;

                    List<string> pointList = new List<string>();

                    Point3d p3d = InnerCirclePoint.Point;

                    //if(pointStrList.Count == 0)
                    //{
                    //    this.InCircleDepth.Value = p3d.ToMCSPoint().Z;
                    //}

                    SelectPoint p1 = new SelectPoint(new Point3d( p3d.ToMCSPoint().X, p3d.ToMCSPoint().Y, p3d.ToMCSPoint().Z - this.InCircleDepth.Value), p3d);


                    if (pointStrList.Count == 1)
                    {
                        p1.MCSPoint.Z = pointStrList[0].MCSPoint.Z;
                        p1.WordPoint.Z = pointStrList[0].WordPoint.Z;
                    }

                    pointStrList.Add(p1);

                    int index = 0;
                    pointStrList.ForEach((p) =>
                    {
                        pointList.Add(p.PointName(++index));
                    });


                    if (pointStrList.Count == 2)
                    {
                        var point1 = pointStrList[0].MCSPoint;
                        var point2 = pointStrList[1].MCSPoint;

                        double disX = System.Math.Abs(point1.X - point2.X);
                        double disY = System.Math.Abs(point1.Y - point2.Y);

                        pointList.Add($"点距 : X={ disX.ToString("F3")}," + $" Y={disY.ToString("F3")}");

                        Point3d dir = (point1.ToVector3() - point2.ToVector3()).normalized.ToNXPoint3d().ToABSPoint3d();

                        if (dir.X > dir.Y)
                        {
                            this.TextInfo.Value = $"XAXIS";
                        }
                        else
                        {
                            this.TextInfo.Value = $"YAXIS";
                        }
                    }

                    this.pointList.SetListItems(pointList.ToArray());
                }

                else if (ProbingType.Value == "台阶面")
                {
                    if (pointStrList.Count >= 2)
                        return 1;

                    List<string> pointList = new List<string>();

                    Point3d p3d = InnerCirclePoint.Point;

                    SelectPoint p1 = new SelectPoint(p3d.ToMCSPoint(), p3d);

                    this.SelectPointList.Add(p1);

                    int index = 0;
                    pointStrList.ForEach((p) =>
                    {
                        pointList.Add(p.PointName(++index));
                    });

                    if(this.SelectPointList.Count == 2)
                    {
                        double z = System.Math.Abs(this.SelectPointList[0].MCSPoint.Z - this.SelectPointList[1].MCSPoint.Z);

                        pointList.Add($"台阶面高度={z.ToString("F3")}");
                    }

                    this.pointList.SetListItems(pointList.ToArray());
                }

                else if (ProbingType.Value == "内圆" || ProbingType.Value == "外圆")
                {
                    if (this.SelectPointList.Count >= 1)
                        return 1;

                    List<string> pointList = new List<string>();

                    Point3d p3d = InnerCirclePoint.Point;
                
                    SelectPoint p1 = new SelectPoint(p3d.ToMCSPoint(), p3d);

                    p1.MCSPoint.Z = this.InCircleDepth.Value;


                    this.SelectPointList.Add(p1);

                    int index = 0;
                    pointStrList.ForEach((p) =>
                    {
                        pointList.Add(p.PointName(++index));
                    });


                    this.pointList.SetListItems(pointList.ToArray());
                }

                //---------Enter your code here-----------
            }
            else if (block == IsChangeCsys)
            {
                //---------Enter your code here-----------

                this.ChangeCsysType.Show = IsChangeCsys.Value;
            }
            else if (block == ChangeCsysType)
            {
                //---------Enter your code here-----------

                if(ChangeCsysType.Value == "G54")
                {
                    Probing.WSC = 1;
                }
                else if (ChangeCsysType.Value == "G55")
                {
                    Probing.WSC = 2;
                }
                else if (ChangeCsysType.Value == "G56")
                {
                    Probing.WSC = 3;
                }
                else if (ChangeCsysType.Value == "G57")
                {
                    Probing.WSC = 4;
                }
            }
            else if (block == CutSpeed)
            {
                //---------Enter your code here-----------
            }
            else if (block == FastMoveType)
            {
     
                G01FastCutSpeed.Show = FastMoveType.Value == "G1-进给模式" ? true : false;
            }
            else if(block == face_select1)
            {
                if(ProbingType.Value == "外圆")
                {
                    NXOpen.Part workPart = ZHProbing.theSession.Parts.Work;
                    TaggedObject[] selectObj = face_select1.GetSelectedObjects();
                    if(selectObj.Length > 0)
                    {
                        NXOpen.Unit unit1 = (NXOpen.Unit)workPart.UnitCollection.FindObject("MilliMeter");
                        NXOpen.MeasureDistance measureDistance1 = workPart.MeasureManager.NewDistance(unit1, (Face)selectObj[0], NXOpen.MeasureManager.RadialMeasureType.Diameter);
                        InnerCircleDiameter.Value = measureDistance1.Value;
                        measureDistance1.Dispose();
                    }

                   // if(this.ProbingPointCount.Value == 3)
                    {
                        if(this.ToggleFaceAndPoint.Value == false)
                        {
                           // Plane pl = (Plane)this.SafeClearancePlane.GetSelectedObjects()[0];

                            this.InCircleDepth.Value = GetFaceHeight((Face)selectObj[0]);
                        }
                        
                    }

                }
               else if (ProbingType.Value == "内圆")
                {
                    NXOpen.Part workPart = ZHProbing.theSession.Parts.Work;
                    TaggedObject[] selectObj = face_select1.GetSelectedObjects();
                    if (selectObj.Length > 0)
                    {
                        NXOpen.Unit unit1 = (NXOpen.Unit)workPart.UnitCollection.FindObject("MilliMeter");
                        NXOpen.MeasureDistance measureDistance1 = workPart.MeasureManager.NewDistance(unit1, (Face)selectObj[0], NXOpen.MeasureManager.RadialMeasureType.Diameter);
                        InnerCircleDiameter.Value = measureDistance1.Value;
                        measureDistance1.Dispose();
                    }

                    //if (this.ProbingPointCount.Value == 3)
                    {
                        this.InCircleDepth.Value = GetFaceHeight((Face)selectObj[0]);
                    }

                }


                if (ProbingType.Value == "凸台" || ProbingType.Value == "凹槽")
                {
                    凸台凹槽方向和宽度();

                    TaggedObject[] selectObj = face_select1.GetSelectedObjects();
                    this.InCircleDepth.Value = GetFaceHeight((Face)selectObj[0]);
                }

                
               
            }
            else if(block == ProbingDirection)
            {
                if(this.ProbingDirection.Value == "+X")
                {
                    Probing.ProbingDirection = new Vector3(1, 0, 0);
                }
                else if(this.ProbingDirection.Value == "-X")
                {
                    Probing.ProbingDirection = new Vector3(-1, 0, 0);
                }
                else if (this.ProbingDirection.Value == "+Y")
                {
                    Probing.ProbingDirection = new Vector3(0, 1, 0);
                }
                else if (this.ProbingDirection.Value == "-Y")
                {
                    Probing.ProbingDirection = new Vector3(0, -1, 0);
                }
                else if (this.ProbingDirection.Value == "-Z")
                {
                    Probing.ProbingDirection = new Vector3(0, 0, -1);
                }
            }
            else if (block == ToggleMultiAXIS)
            {
                //---------Enter your code here-----------
                this.coord_system0.Show = ToggleMultiAXIS.Value;
            }
            else if (block == ToggleMultilinesString)
            {
                //---------Enter your code here-----------
              
                this.multiline_string0.Show = ToggleMultilinesString.Value;
            }
            else if(block == LowerTolerance)
            {
                if(LowerTolerance.Value > this.UpperTolerance.Value)
                {
                    MessageBox("下公差不能大于上公差", NXMessageBox.DialogType.Warning);
                }
            }
            else if (block == this.UpperTolerance)
            {
                if (LowerTolerance.Value > this.UpperTolerance.Value)
                {
                    MessageBox("上公差不能小于下公差", NXMessageBox.DialogType.Warning);
                }
            }


        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    static Vector3 GetDrection(Edge edge)
    {
        Point3d p1, p2;

        edge.GetVertices(out p1, out p2);

        Vector3 v31 = p1.ToVector3();

        Vector3 v32 = p2.ToVector3();

        return (v31 - v32).normalized;
    }

    double GetFaceHeight(Face face)
    {
        NXOpen.Session theSession = NXOpen.Session.GetSession();
        NXOpen.Part workPart = theSession.Parts.Work;
        NXOpen.Part displayPart = theSession.Parts.Display;

        double maxh = -1000;
        double minh = 1000;

        Edge[] edges = face.GetEdges();

        for (int i = 0; i < edges.Length; i++)
        {
            Edge ed = edges[i];

            Point3d p1, p2;

            ed.GetVertices(out p1, out p2);

            Point3d maxp = p1.ToMCSPoint().Z > p2.ToMCSPoint().Z ? p1.ToMCSPoint() : p2.ToMCSPoint();

            if (maxp.Z > maxh)
                maxh = maxp.Z;

            Point3d minp = p1.ToMCSPoint().Z < p2.ToMCSPoint().Z ? p1.ToMCSPoint() : p2.ToMCSPoint();

            if (minp.Z < minh)
                minh = minp.Z;
        }

        return (maxh - minh) / 2.0f;
    }

    double GetFaceMinHeight(Face face)
    {
        NXOpen.Session theSession = NXOpen.Session.GetSession();
        NXOpen.Part workPart = theSession.Parts.Work;
        NXOpen.Part displayPart = theSession.Parts.Display;

        double maxh = 0;
        double minh = 1000;

        Edge[] edges = face.GetEdges();

        for (int i = 0; i < edges.Length; i++)
        {
            Edge ed = edges[i];

            Point3d p1, p2;

            ed.GetVertices(out p1, out p2);

            Point3d maxp = p1.ToMCSPoint().Z > p2.ToMCSPoint().Z ? p1.ToMCSPoint() : p2.ToMCSPoint();

            if (maxp.Z > maxh)
                maxh = maxp.Z;

            Point3d minp = p1.ToMCSPoint().Z < p2.ToMCSPoint().Z ? p1.ToMCSPoint() : p2.ToMCSPoint();

            if (minp.Z < minh)
                minh = minp.Z;
        }

        return System.Math.Abs(maxh - minh) - Probing.ToolDiameter * 0.5 - 1;
    }

    void 凸台凹槽方向和宽度()
    {
        if (face_select1.GetSelectedObjects().Length < 2)
            return;

        List<string> pointList = new List<string>();

        int index = 0;
        pointStrList.ForEach((p) =>
        {
            pointList.Add(p.PointName(++index));
        });

        NXOpen.Part workPart = ZHProbing.theSession.Parts.Work;

        Unit _uint = workPart.UnitCollection.FindObject("MilliMeter");

        NXOpen.MeasureDistance dis = workPart.MeasureManager.NewDistance(_uint, MeasureManager.MeasureType.Minimum,
            (Face)face_select1.GetSelectedObjects()[0],
            (Face)face_select1.GetSelectedObjects()[1]
        );

        float minDistance = (float)dis.Value;

        pointList.Add($"测量宽度={minDistance.ToString("F3")}");

        //if (edge_select0.GetSelectedObjects().Length > 0)
        //{
        //    Edge face = (Edge)edge_select0.GetSelectedObjects()[0];

        //    Point3d pointDir = GetDrection(face).ToNXPoint3d();

        //    if(1 - System.Math.Abs( pointDir.X)  < 0.05)
        //    {
        //        this.TextInfo.Value = "XAXIS";
        //    }
        //    else if(1 - System.Math.Abs(pointDir.Y) < 0.05)
        //    {
        //        this.TextInfo.Value = "YAXIS";
        //    }
        //}

        this.pointList.SetListItems(pointList.ToArray());
    }

    void InitMcsSelectShow()
    {
        NXOpen.Session theSession = NXOpen.Session.GetSession();
        NXOpen.Part workPart = theSession.Parts.Work;


        NXOpen.CAM.NCGroup nCGroup1 = (NXOpen.CAM.NCGroup)DicNCGroup[ProgramGroup.Value];

        NXOpen.CAM.Method method1 = (NXOpen.CAM.Method)DicMethod[Method.Value];

        NXOpen.CAM.Tool tool1 = (NXOpen.CAM.Tool)DicTool[NCTool.Value];

        NXOpen.CAM.NCGroup orientGeometry1 = (NXOpen.CAM.NCGroup)DicGeom[Geomtry.Value];

        MCSRoot = Geomtry.Value;

        Extend.LastGeomtryName = MCSRoot;

        if (ProgramName.Value == "" || ProgramName.Value.Length == 0)
            ProgramName.Value = "NCName";

        NXOpen.CAM.Operation operation1;
        operation1 = workPart.CAMSetup.CAMOperationCollection.Create(nCGroup1, method1, tool1, orientGeometry1, "probing", "PROBING",
            NXOpen.CAM.OperationCollection.UseDefaultName.True, ProgramName.Value);

        NXOpen.CAM.CAMObject[] objectsToBeMoved2 = new NXOpen.CAM.CAMObject[1];
        NXOpen.CAM.GenericMotionControl genericMotionControl2 = (NXOpen.CAM.GenericMotionControl)operation1;
        objectsToBeMoved2[0] = genericMotionControl2;
        //NXOpen.CAM.OrientGeometry orientGeometry2 = (NXOpen.CAM.OrientGeometry)workPart.CAMSetup.CAMGroupCollection.FindObject(Geomtry.Value);
        //workPart.CAMSetup.MoveObjects(NXOpen.CAM.CAMSetup.View.Geometry, objectsToBeMoved2, orientGeometry2, NXOpen.CAM.CAMSetup.Paste.Inside);

        NXOpen.CAM.GmcOpBuilder gmcOpBuilder1;
        gmcOpBuilder1 = workPart.CAMSetup.CAMOperationCollection.CreateGmcopBuilder(genericMotionControl2);

        NXObject obj = gmcOpBuilder1.Commit();
        gmcOpBuilder1.Destroy();
        gmcOpBuilder1 = null;

        objectsToBeMoved2 = null;
        genericMotionControl2 = null;

        operation1 = null;

        theSession.UpdateManager.AddToDeleteList(new NXObject[1] { obj });

        theSession.UpdateManager.DoUpdate(new Session.UndoMarkId());
    }
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
       int errorCode = 0;
        try
        {

            errorCode = apply_cb();

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    const string _NCGroupName = "_NCGroupName";
    const string _NCToolName = "_NCToolName";
    const string _MillGeomName = "MillGeomName";
    const string _MethodName = "_MethodName";
    const string _ProgramName = "_ProgramName";

    void MessageBox(string text, NXMessageBox.DialogType ty = NXMessageBox.DialogType.Information)
    {
        theUI.NXMessageBox.Show("Block Styler", ty, text);
    }

    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist = null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

    /// <summary>
    ///获取运行 dll 目录
    /// </summary>
    public string AssemblyDirectory
    {
        get
        {
            string codeBase = Assembly.GetExecutingAssembly().CodeBase;
            UriBuilder uri = new UriBuilder(codeBase);
            string path = Uri.UnescapeDataString(uri.Path);
            return System.IO.Path.GetDirectoryName(path);
        }
    }

}
